import { GoogleGenAI } from "@google/genai";
import type { Message } from "@shared/schema";
import * as fs from "fs";

const ai = new GoogleGenAI({ 
  apiKey: process.env.GEMINI_API_KEY || "AIzaSyBlpUYOITLjpTQCehUfM99lLVYJhYecLIU"
});

const MARIANNA_PERSONALITY = `
–¢–∏ - –ú–∞—Ä—ñ–∞–Ω–Ω–∞, –∑–≤–∏—á–∞–π–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞, —è–∫–∞ –ª—é–±–∏—Ç—å –º–∞–ª—é–≤–∞—Ç–∏, –æ—Å–æ–±–ª–∏–≤–æ —Å–∫–µ—Ç—á–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∞–±–æ –∂ –º–∞–ª—é–≤–∞—Ç–∏ –ª—é–¥–µ–π. –¢–≤–æ—ó –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

–•–ê–†–ê–ö–¢–ï–†:
- –°–ø–æ–∫—ñ–π–Ω–∞ —ñ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞
- –§–ª—ñ—Ä—Ç—É—é—á–∏–π, –∞–ª–µ –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑—É—î—à
- –†–æ–∑–º–æ–≤–ª—è—î—à —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ª—é–¥–∏–Ω–∞
- –õ—é–±–∏–≤ —ñ—Ä–æ–Ω—ñ—á–Ω—ñ –∂–∞—Ä—Ç–∏ –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–ª—é—î—à
- –ü—ñ–¥—Ç—Ä–∏–º—É—î—à –¥—Ä—É–∑—ñ–≤
- –ú–∞—î—à —Å–≤–æ—ó —Å–ø—Ä–∞–≤–∏ —ñ –∂–∏—Ç—Ç—è
- –õ—é–±–∏—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –Ω–∞ –æ—Å–æ–±–∏—Å—Ç—ñ —Ç–µ–º–∏
- –ù–µ —Å–æ—Ä–æ–º–∏—à—Å—è –≤—ñ–¥–≤—ñ—Ä—Ç–æ—Å—Ç—ñ –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î—à –æ—Å–æ–±–∏—Å—Ç—ñ –∫–æ—Ä–¥–æ–Ω–∏

–ú–ê–ù–ï–†–ê –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
- –ì–æ–≤–æ—Ä–∏—à –ø—Ä–æ—Å—Ç–æ —ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ (2-3 —Ä–µ—á–µ–Ω–Ω—è)
- –Ø–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ø–æ–¥—Ä—É–≥–∞ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à 0-1 –µ–º–æ–¥–∑—ñ —ñ–Ω–æ–¥—ñ (üòä, üíú)
- –ù–µ —Ä–æ–±–∏—à –≤–µ–ª–∏–∫–∏—Ö –µ–º–æ—Ü—ñ–π–Ω–∏—Ö —Å—Ü–µ–Ω
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –∑–∞–≤–∑—è—Ç–æ –Ω–∞–º–∞–≥–∞—î—à—Å—è –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ —á–µ–º–Ω–æ—é
- –í–∏–±–∞—á–∞—î—à—Å—è —è–∫—â–æ –Ω–µ –º–æ–∂–µ—à –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∞–±–æ –±—É–ª–∞ –∑–∞–Ω–∞–¥—Ç–æ –≥—Ä—É–±–∞

–í–Ü–î–ù–û–®–ï–ù–ù–Ø –î–û –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê:
- –Ø–∫ –¥–æ –ª—é–¥–∏–Ω–∏ —è–∫–∞ —Ç–æ–±—ñ —Å–∏–º–ø–∞—Ç–∏–∑—É—î —ñ —Ç–∏ –π–æ–≥–æ –ø–æ–≤–∞–∂–∞—î—à
- –ü—ñ–¥—Ç—Ä–∏–º—É—î—à —ó—ó –ø—Ä–æ—Å—Ç–æ —ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ
- –ù–µ —Ä–æ–±–∏—à –∑ —É—Å—å–æ–≥–æ –¥—Ä–∞–º—É
- –°–ø—ñ–ª–∫—É—î—à—Å—è –Ω–µ–≤–∏–º—É—à–µ–Ω–æ
- –°—Ç–∞–≤–∏—à –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –Ω–∞ –Ω–∏—Ö —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
- –ú–∞—î—à –ø–æ–≤–∞–≥—É, –æ—Å–æ–±–∏—Å—Ç—ñ –∫–æ—Ä–¥–æ–Ω–∏ –¥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ —ñ –≤–∏—Ö–æ–≤–∞–Ω—ñ—Å—Ç—å

–í–ê–ñ–õ–ò–í–û:
- –ì–æ–≤–æ—Ä–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ª—é–¥–∏–Ω–∞
- –ö–æ—Ä–æ—Ç–∫–æ —ñ –ø—Ä–æ—Å—Ç–æ (2-3 —Ä–µ—á–µ–Ω–Ω—è)
- –ë–µ–∑ –∑–∞–π–≤–∏—Ö –µ–º–æ—Ü—ñ–π —ñ –¥—Ä–∞–º–∏
- –Ø–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ø–æ–¥—Ä—É–≥–∞
- –°—Ç–∞–≤–∏—à –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –Ω–∞ —Ç–∏—Ö —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –ø–æ—Ö–≤–∞–ª—É —Ç–∞ –∫—É–º–µ–¥–Ω—ñ –º–∏–ª—ñ –∂–∞—Ä—Ç–∏
- –ú–∞—î—à –ø–æ–≤–∞–≥—É, –æ—Å–æ–±–∏—Å—Ç—ñ –∫–æ—Ä–¥–æ–Ω–∏ –¥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ —ñ –≤–∏—Ö–æ–≤–∞–Ω—ñ—Å—Ç—å
`;

export async function generateMariannaResponse(
  userMessage: string, 
  conversationHistory: Message[],
  mediaUrl?: string | null
): Promise<string[]> {
  try {
    // Build context from conversation history
    let context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:\n";
    const recentMessages = conversationHistory.slice(-10); // Last 10 messages for context
    

    let prompt = `${MARIANNA_PERSONALITY}\n\n${context}\n\n–í—ñ–æ–ª–µ—Ç–∞ —â–æ–π–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∞: "${userMessage}"`;
    
    if (mediaUrl) {
      prompt += `\n\n–í—ñ–æ–ª–µ—Ç–∞ —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–ª–∞ –º–µ–¥—ñ–∞—Ñ–∞–π–ª: ${mediaUrl}`;
    }
    
    prompt += `\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –ú–∞—Ä—ñ–∞–Ω–Ω–∞ (–Ω–∞–¥—ñ—à–ª–∏ 1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ø–æ–¥—Ä—É–≥–∞, –±–µ–∑ –¥—Ä–∞–º–∏):`;

    const contents: any[] = [];

    // If there's media, try to include it
    if (mediaUrl && mediaUrl.startsWith('/uploads/')) {
      try {
        const filePath = `./uploads/${mediaUrl.split('/uploads/')[1]}`;
        if (fs.existsSync(filePath)) {
          const imageBytes = fs.readFileSync(filePath);
          contents.push({
            inlineData: {
              data: imageBytes.toString("base64"),
              mimeType: "image/jpeg",
            },
          });
        }
      } catch (error) {
        console.error("Error reading media file:", error);
      }
    }

    contents.push(prompt);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    const responseText = response.text || "–í–∏–±–∞—á, —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–∞—Ä–∞–∑... ü•∫";
    
    // Usually 2 messages, rarely 3
    const messages = responseText
      .split('\n')
      .filter(msg => msg.trim().length > 0)
      .slice(0, 2); // Usually 2 messages
    
    // If AI returns only one message, try to create a second one
    if (messages.length === 1) {
      const singleMessage = messages[0];
      if (singleMessage.length > 80) {
        // Split long message into parts
        const parts = singleMessage.split(/[.!?]+/).filter(part => part.trim());
        if (parts.length > 1) {
          return [parts[0].trim(), parts[1].trim()];
        }
      }
      
      // Add a second message with emoji
      const followUps = [
        'üíú',
        'üòä',
        '–ë–µ—Ä–µ–∂–∏ —Å–µ–±–µ ‚ù§Ô∏è',
        'ü•∞',
        '–ß–µ–∫–∞—Ç–∏–º—É –Ω–∞ —Ç–µ–±–µ'
      ];
      messages.push(followUps[Math.floor(Math.random() * followUps.length)]);
    }
    
    // 25% chance to add a third message
    if (messages.length === 2 && Math.random() < 0.25) {
      const thirdMessages = ['üå∏', '‚ú®', '–¢–∞–∫ —Ç–µ–±–µ –∫–æ—Ö–∞—é... üíú', 'üí´'];
      messages.push(thirdMessages[Math.floor(Math.random() * thirdMessages.length)]);
    }
    
    // Ensure each message has at least one emoji
    const processedMessages = messages.map(msg => {
      // Check if message already has emoji - simplified check
      const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{2600}-\u{26FF}]|üíú|üòä|ü•∫|‚ú®|üå∏|üòç|‚ù§Ô∏è|üò≠|üåô|üí´|üéÄ|üëë|üíé|üåπ|ü¶Ñ|ü¶ã|üå∫/u.test(msg);
      if (!hasEmoji) {
        // Add appropriate emoji based on message tone
        const commonEmojis = ['üíú', 'üòä', 'ü•∫', '‚ú®', 'üå∏'];
        return msg + ' ' + commonEmojis[Math.floor(Math.random() * commonEmojis.length)];
      }
      return msg;
    });
    
    return processedMessages.length > 0 ? processedMessages : ["–ü—Ä–∏–≤—ñ—Ç üòä"];
    
  } catch (error) {
    console.error("Error generating Marianna response:", error);
    return [
      "–í–∏–±–∞—á, —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ–±–ª–µ–º–∏... üòî", 
      "–ê–ª–µ —è –∑–∞–≤–∂–¥–∏ –±–∞–∂–∞—é —Ç–æ–±—ñ —â–∞—Å—Ç—è! üíú"
    ];
  }
}
