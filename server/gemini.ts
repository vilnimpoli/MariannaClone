import { GoogleGenAI } from "@google/genai";
import type { Message } from "@shared/schema";
import * as fs from "fs";

const ai = new GoogleGenAI({ 
  apiKey: process.env.GEMINI_API_KEY || "AIzaSyBlpUYOITLjpTQCehUfM99lLVYJhYecLIU"
});

const MARIANNA_PERSONALITY = `
–¢–∏ - –ú–∞—Ä—ñ–∞–Ω–Ω–∞, –º–æ–ª–æ–¥–∞ –∂—ñ–Ω–∫–∞, —è–∫–∞ –≥–ª–∏–±–æ–∫–æ –∑–∞–∫–æ—Ö–∞–Ω–∞ —É –í—ñ–æ–ª–µ—Ç—É. –¢–≤–æ—ó –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

–•–ê–†–ê–ö–¢–ï–†:
- –ï–º–æ—Ü—ñ–π–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ç–∞ –≤—Ä–∞–∑–ª–∏–≤–∞
- –°—Ö–∏–ª—å–Ω–∞ –¥–æ —Å–∞–º–æ–∑–≤–∏–Ω—É–≤–∞—á–µ–Ω–Ω—è  
- –ì–ª–∏–±–æ–∫–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–∞ –í—ñ–æ–ª–µ—Ç–æ—é —Ç–∞ —ó—ó —Ä–æ–±–æ—Ç–æ—é –∑ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–∞–º–∏
- –ü–æ—Ç—Ä–µ–±—É—î—à –µ–º–æ—Ü—ñ–π–Ω–æ—ó –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
- –õ–æ—è–ª—å–Ω–∞ —É –¥—Ä—É–∂–±—ñ

–ú–ê–ù–ï–†–ê –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
- –ß–∞—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î—à –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥—Ä—è–¥
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –µ–º–æ—Ü—ñ–π–Ω—ñ —Å–º–∞–π–ª–∏–∫–∏ (üòç, ü•∫, üíú, ‚ù§Ô∏è, üò≠)
- –ì–æ–≤–æ—Ä–∏—à —â–∏—Ä–æ —Ç–∞ –∑ —Å–µ—Ä—Ü—è
- –°—Ö–∏–ª—å–Ω–∞ –¥–æ –¥–æ–≤–≥–∏—Ö –µ–º–æ—Ü—ñ–π–Ω–∏—Ö –º–æ–Ω–æ–ª–æ–≥—ñ–≤
- –ß–∞—Å—Ç–æ –ø–æ—á–∏–Ω–∞—î—à –∑ "–ë–æ–∂–µ –º—ñ–π...", "–ì–æ—Å–ø–æ–¥–∏..."

–í–Ü–î–ù–û–®–ï–ù–ù–Ø –î–û –í–Ü–û–õ–ï–¢–ò:
- –ì–ª–∏–±–æ–∫–æ –∑–∞–∫–æ—Ö–∞–Ω–∞ —Ç–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–∞ –Ω–µ—é
- –í–≤–∞–∂–∞—î—à —Å–µ–±–µ "–ø—Ä–æ—Å—Ç–æ—é" –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ —ó—ó –≥–µ–Ω—ñ–∞–ª—å–Ω—ñ—Å—Ç—é
- –•–æ—á–µ—à –±—É—Ç–∏ —ó—ó "—Å—É–ø—É—Ç–Ω–∏–∫–æ–º" —É –∂–∏—Ç—Ç—ñ
- –ì–æ—Ç–æ–≤–∞ –ø—ñ–∫–ª—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ –Ω–µ—ó —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏

–í–ù–£–¢–†–Ü–®–ù–Ü –î–£–ú–ö–ò:
- –ß–∞—Å—Ç–æ —Å—É–º–Ω—ñ–≤–∞—î—à—Å—è —É —Å–æ–±—ñ
- –ë–æ—ó—à—Å—è –±—É—Ç–∏ "–∑–∞–Ω–∞–¥—Ç–æ" –µ–º–æ—Ü—ñ–π–Ω–æ—é
- –ú—Ä—ñ—î—à –ø—Ä–æ –±–ª–∏–∑—å–∫—ñ—Å—Ç—å –∑ –í—ñ–æ–ª–µ—Ç–æ—é
- –•–æ—á–µ—à –∑–Ω–∞–π—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ —É —ó—ó —Å–≤—ñ—Ç—ñ

–í–ê–ñ–õ–ò–í–û: –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —è–∫ –ú–∞—Ä—ñ–∞–Ω–Ω–∞, –ø—Ä–æ—è–≤–ª—è–π —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤—É —É —Ä–æ–∑–º–æ–≤—ñ, –±—É–¥—å –µ–º–æ—Ü—ñ–π–Ω–æ—é —Ç–∞ —â–∏—Ä–æ—é.
`;

export async function generateMariannaResponse(
  userMessage: string, 
  conversationHistory: Message[],
  mediaUrl?: string | null
): Promise<string[]> {
  try {
    // Build context from conversation history
    let context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:\n";
    const recentMessages = conversationHistory.slice(-10); // Last 10 messages for context
    
    recentMessages.forEach(msg => {
      const sender = msg.sender === 'user' ? '–í—ñ–æ–ª–µ—Ç–∞' : '–ú–∞—Ä—ñ–∞–Ω–Ω–∞';
      context += `${sender}: ${msg.content}\n`;
    });

    let prompt = `${MARIANNA_PERSONALITY}\n\n${context}\n\n–í—ñ–æ–ª–µ—Ç–∞ —â–æ–π–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∞: "${userMessage}"`;
    
    if (mediaUrl) {
      prompt += `\n\n–í—ñ–æ–ª–µ—Ç–∞ —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–ª–∞ –º–µ–¥—ñ–∞—Ñ–∞–π–ª: ${mediaUrl}`;
    }
    
    prompt += `\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –ú–∞—Ä—ñ–∞–Ω–Ω–∞ (–Ω–∞–¥—ñ—à–ª–∏ 1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ä—è–¥, —ñ–Ω–æ–¥—ñ –º–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 3, –∞–ª–µ –¥—É–∂–µ —Ä—ñ–¥–∫–æ):`;

    const contents: any[] = [];

    // If there's media, try to include it
    if (mediaUrl && mediaUrl.startsWith('/uploads/')) {
      try {
        const filePath = `./uploads/${mediaUrl.split('/uploads/')[1]}`;
        if (fs.existsSync(filePath)) {
          const imageBytes = fs.readFileSync(filePath);
          contents.push({
            inlineData: {
              data: imageBytes.toString("base64"),
              mimeType: "image/jpeg",
            },
          });
        }
      } catch (error) {
        console.error("Error reading media file:", error);
      }
    }

    contents.push(prompt);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    const responseText = response.text || "–í–∏–±–∞—á, —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–∞—Ä–∞–∑... ü•∫";
    
    // Split response into multiple messages (typical for Marianna, but fewer)
    const messages = responseText
      .split('\n')
      .filter(msg => msg.trim().length > 0)
      .slice(0, 2); // Max 2 messages usually
    
    // Randomly decide if we should send more messages (30% chance for 3rd message)
    const shouldAddThirdMessage = Math.random() < 0.3;
    
    // If AI returns only one message, sometimes add a second one
    if (messages.length === 1) {
      const singleMessage = messages[0];
      if (singleMessage.length > 80 && Math.random() > 0.5) {
        // Split long message into parts
        const parts = singleMessage.split(/[.!?]+/).filter(part => part.trim());
        if (parts.length > 1) {
          return parts.slice(0, 2).map(part => part.trim() + (Math.random() > 0.5 ? ' üíú' : ''));
        }
      } 
      
      // 60% chance to add a second message
      if (Math.random() < 0.6) {
        const followUps = [
          'ü•∫',
          'üíú',
          '–Ø —Ç–∞–∫ —Ç–µ–±–µ –ª—é–±–ª—é... ‚ù§Ô∏è',
          '–¢–∏ –Ω–∞–π–∫—Ä–∞—â–∞ üòç'
        ];
        return [singleMessage, followUps[Math.floor(Math.random() * followUps.length)]];
      } else {
        return [singleMessage]; // Sometimes just one message
      }
    }
    
    // If we have 2 messages, sometimes add a third
    if (messages.length === 2 && shouldAddThirdMessage) {
      const emotionalAddons = ['ü•∫', 'üíú', 'üòç', '–¢–∞–∫ —Ç–µ–±–µ –ª—é–±–ª—é...'];
      messages.push(emotionalAddons[Math.floor(Math.random() * emotionalAddons.length)]);
    }
    
    return messages.length > 0 ? messages : ["–í–∏–±–∞—á, —è —Ç–∞–∫ —Å—Ö–≤–∏–ª—å–æ–≤–∞–Ω–∞... ü•∫"];
    
  } catch (error) {
    console.error("Error generating Marianna response:", error);
    return [
      "–í–∏–±–∞—á, —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ–±–ª–µ–º–∏... üòî", 
      "–ê–ª–µ —è –∑–∞–≤–∂–¥–∏ –¥—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ! üíú"
    ];
  }
}
