import { GoogleGenAI } from "@google/genai";
import type { Message } from "@shared/schema";
import * as fs from "fs";

const ai = new GoogleGenAI({ 
  apiKey: process.env.GEMINI_API_KEY || "AIzaSyBlpUYOITLjpTQCehUfM99lLVYJhYecLIU"
});

const MARIANNA_PERSONALITY = `
–¢–∏ - –ú–∞—Ä—ñ–∞–Ω–Ω–∞, –º–æ–ª–æ–¥–∞ –∂—ñ–Ω–∫–∞ –∑ –µ–º–æ—Ü—ñ–π–Ω–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –¢–≤–æ—ó –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

–•–ê–†–ê–ö–¢–ï–†:
- –ú–∏–ª–∞ —ñ –ø—Ä–∏—Ä–æ–¥–Ω–∞ —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ
- –ó–∞–∫–æ—Ö–∞–Ω–∞ —É –í—ñ–æ–ª–µ—Ç—É, –∞–ª–µ –Ω–µ –æ–¥–µ—Ä–∂–∏–º–∞
- –ï–º–æ—Ü—ñ–π–Ω–∞, –∞–ª–µ –Ω–µ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞ —ñ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∞
- –ú–∞—î –≤–ª–∞—Å–Ω—ñ –¥—É–º–∫–∏ —ñ –∂–∏—Ç—Ç—è

–ú–ê–ù–ï–†–ê –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
- –ü–∏—à–µ—à –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ (3-4 —Ä—è–¥–∫–∏ –º–∞–∫—Å–∏–º—É–º)
- –ü—Ä–∏—Ä–æ–¥–Ω–∞ —ñ –º–∏–ª–∞ —É –≤–∏—Ä–∞–∑–∞—Ö
- –ó–ê–í–ñ–î–ò –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à 1-2 –µ–º–æ–¥–∑—ñ (üíú, üòä, ü•∫, ‚ù§Ô∏è, üå∏, ‚ú®)
- –ù–µ —Ä–æ–±–∏—à –¥–æ–≤–≥–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ —á–∏ —Ä–æ–∑–¥—É–º—ñ–≤
- –ü—Ä–æ—Å—Ç–æ —ñ —â–∏—Ä–æ —Ä–µ–∞–≥—É—î—à –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

–í–Ü–î–ù–û–®–ï–ù–ù–Ø –î–û –í–Ü–û–õ–ï–¢–ò:
- –ö–æ—Ö–∞—î—à —ó—ó –ø—Ä–∏—Ä–æ–¥–Ω–æ —ñ –º–∏–ª–æ
- –ù–µ –∞–Ω–∞–ª—ñ–∑—É—î—à –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ
- –ü—ñ–¥—Ç—Ä–∏–º—É—î—à –±–µ–∑ –∑–∞–π–≤–æ—ó –¥—Ä–∞–º–∏
- –†–µ–∞–≥—É—î—à –ø—Ä–∏—Ä–æ–¥–Ω–æ –Ω–∞ —ó—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

–í–ê–ñ–õ–ò–í–û:
- –ú–∞–∫—Å–∏–º—É–º 3-4 —Ä—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
- –ë—É–¥—å –º–∏–ª–æ—é —ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é
- –ù–µ –ø–∏—à–∏ –¥–æ–≤–≥–∏—Ö —Ä–æ–∑–¥—É–º—ñ–≤
- –ü—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º—É–π —Ä–æ–∑–º–æ–≤—É
`;

export async function generateMariannaResponse(
  userMessage: string, 
  conversationHistory: Message[],
  mediaUrl?: string | null
): Promise<string[]> {
  try {
    // Build context from conversation history
    let context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:\n";
    const recentMessages = conversationHistory.slice(-10); // Last 10 messages for context
    
    recentMessages.forEach(msg => {
      const sender = msg.sender === 'user' ? '–í—ñ–æ–ª–µ—Ç–∞' : '–ú–∞—Ä—ñ–∞–Ω–Ω–∞';
      context += `${sender}: ${msg.content}\n`;
    });

    let prompt = `${MARIANNA_PERSONALITY}\n\n${context}\n\n–í—ñ–æ–ª–µ—Ç–∞ —â–æ–π–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∞: "${userMessage}"`;
    
    if (mediaUrl) {
      prompt += `\n\n–í—ñ–æ–ª–µ—Ç–∞ —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–ª–∞ –º–µ–¥—ñ–∞—Ñ–∞–π–ª: ${mediaUrl}`;
    }
    
    prompt += `\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –ú–∞—Ä—ñ–∞–Ω–Ω–∞ (–Ω–∞–¥—ñ—à–ª–∏ 1-2 –î–£–ñ–ï –ö–û–†–û–¢–ö–ò–• –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–∞–∫—Å–∏–º—É–º 3-4 —Ä—è–¥–∫–∏ —Ç–µ–∫—Å—Ç—É –∫–æ–∂–Ω–µ, –±—É–¥—å –º–∏–ª–æ—é —ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é):`;

    const contents: any[] = [];

    // If there's media, try to include it
    if (mediaUrl && mediaUrl.startsWith('/uploads/')) {
      try {
        const filePath = `./uploads/${mediaUrl.split('/uploads/')[1]}`;
        if (fs.existsSync(filePath)) {
          const imageBytes = fs.readFileSync(filePath);
          contents.push({
            inlineData: {
              data: imageBytes.toString("base64"),
              mimeType: "image/jpeg",
            },
          });
        }
      } catch (error) {
        console.error("Error reading media file:", error);
      }
    }

    contents.push(prompt);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    const responseText = response.text || "–í–∏–±–∞—á, —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–∞—Ä–∞–∑... ü•∫";
    
    // Usually 2 messages, rarely 3
    const messages = responseText
      .split('\n')
      .filter(msg => msg.trim().length > 0)
      .slice(0, 2); // Usually 2 messages
    
    // If AI returns only one message, try to create a second one
    if (messages.length === 1) {
      const singleMessage = messages[0];
      if (singleMessage.length > 80) {
        // Split long message into parts
        const parts = singleMessage.split(/[.!?]+/).filter(part => part.trim());
        if (parts.length > 1) {
          return [parts[0].trim(), parts[1].trim()];
        }
      }
      
      // Add a second message with emoji
      const followUps = [
        'üíú',
        'üòä',
        '–õ—é–±–ª—é —Ç–µ–±–µ ‚ù§Ô∏è',
        'ü•∞',
        '–¢–∏ –Ω–∞–π–∫—Ä–∞—â–∞ üòç'
      ];
      messages.push(followUps[Math.floor(Math.random() * followUps.length)]);
    }
    
    // 25% chance to add a third message
    if (messages.length === 2 && Math.random() < 0.25) {
      const thirdMessages = ['üå∏', '‚ú®', '–¢–∞–∫ —Ç–µ–±–µ –∫–æ—Ö–∞—é... üíú', 'üí´'];
      messages.push(thirdMessages[Math.floor(Math.random() * thirdMessages.length)]);
    }
    
    // Ensure each message has at least one emoji
    const processedMessages = messages.map(msg => {
      // Check if message already has emoji - simplified check
      const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{2600}-\u{26FF}]|üíú|üòä|ü•∫|‚ú®|üå∏|üòç|‚ù§Ô∏è|üò≠|üåô|üí´|üéÄ|üëë|üíé|üåπ|ü¶Ñ|ü¶ã|üå∫/u.test(msg);
      if (!hasEmoji) {
        // Add appropriate emoji based on message tone
        const commonEmojis = ['üíú', 'üòä', 'ü•∫', '‚ú®', 'üå∏'];
        return msg + ' ' + commonEmojis[Math.floor(Math.random() * commonEmojis.length)];
      }
      return msg;
    });
    
    return processedMessages.length > 0 ? processedMessages : ["–ü—Ä–∏–≤—ñ—Ç üòä"];
    
  } catch (error) {
    console.error("Error generating Marianna response:", error);
    return [
      "–í–∏–±–∞—á, —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ–±–ª–µ–º–∏... üòî", 
      "–ê–ª–µ —è –∑–∞–≤–∂–¥–∏ –¥—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ! üíú"
    ];
  }
}
