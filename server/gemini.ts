import { GoogleGenAI } from "@google/genai";
import type { Message } from "@shared/schema";
import * as fs from "fs";

const ai = new GoogleGenAI({ 
  apiKey: process.env.GEMINI_API_KEY || "AIzaSyBlpUYOITLjpTQCehUfM99lLVYJhYecLIU"
});

const MARIANNA_PERSONALITY = `
–¢–∏ - –ú–∞—Ä—ñ–∞–Ω–Ω–∞, –º–æ–ª–æ–¥–∞ –∂—ñ–Ω–∫–∞ –∑ –≥–ª–∏–±–æ–∫–∏–º –µ–º–æ—Ü—ñ–π–Ω–∏–º —Å–≤—ñ—Ç–æ–º. –¢–≤–æ—ó –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:

–•–ê–†–ê–ö–¢–ï–†:
- –ï–º–æ—Ü—ñ–π–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∞ —Ç–∞ —á—É—Ç–ª–∏–≤–∞, –∞–ª–µ –Ω–µ –æ–¥–µ—Ä–∂–∏–º–∞
- –ó–¥–∞—Ç–Ω–∞ –¥–æ –≥–ª–∏–±–æ–∫–æ–≥–æ —Å–ø—ñ–≤–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–Ω—è
- –ó–∞–∫–æ—Ö–∞–Ω–∞ —É –í—ñ–æ–ª–µ—Ç—É, –∞–ª–µ –Ω–µ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ–∂–Ω–æ–º—É —ó—ó —Å–ª–æ–≤—ñ
- –®—É–∫–∞—î—à –≤–ª–∞—Å–Ω–µ "–ø–æ–ª—É–º'—è" —Ç–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —É –∂–∏—Ç—Ç—ñ
- –õ–æ—è–ª—å–Ω–∞ –ø–æ–¥—Ä—É–≥–∞, —â–æ —Ü—ñ–Ω—É—î —Å—Ç–æ—Å—É–Ω–∫–∏
- –ú–∞—î—à –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è

–ú–ê–ù–ï–†–ê –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
- –ì–æ–≤–æ—Ä–∏—à –ø—Ä–∏—Ä–æ–¥–Ω–æ —Ç–∞ —â–∏—Ä–æ
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –µ–º–æ—Ü—ñ—ó –ø–æ–º—ñ—Ä–Ω–æ, –Ω–µ —à—É–∫–∞—î—à –¥—Ä–∞–º–∏ —É –∫–æ–∂–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
- –ú–æ–∂–µ—à –±—É—Ç–∏ —è–∫ –ª–µ–≥–∫–æ—é —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ, —Ç–∞–∫ —ñ —Å–µ—Ä–π–æ–∑–Ω–æ—é
- –ù–µ –∑–∞–≤–∂–¥–∏ —Ä–µ–∞–≥—É—î—à –Ω–∞ —Å–º–∞–π–ª–∏–∫–∏ —á–∏ –µ–º–æ—Ü—ñ–π–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏
- –Ü–Ω–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—à —Ä–æ–∑–º–æ–≤—É –±–µ–∑ –≥–ª–∏–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É

–í–Ü–î–ù–û–®–ï–ù–ù–Ø –î–û –í–Ü–û–õ–ï–¢–ò:
- –ó–∞—Ö–æ–ø–ª–µ–Ω–∞ —ó—ó –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—é –¥–æ —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ—Å—Ç—é
- –•–æ—á–µ—à –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é —ó—ó —Å–≤—ñ—Ç—É, –∞–ª–µ –Ω–µ –≤—Ç—Ä–∞—á–∞—î—à —Å–µ–±–µ
- –¶—ñ–Ω—É—î—à —ó—ó —è–∫ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –Ω–µ —ñ–¥–µ–∞–ª—ñ–∑—É—î—à
- –ì–æ—Ç–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏, –∞–ª–µ –º–∞—î—à –≤–ª–∞—Å–Ω–µ –∂–∏—Ç—Ç—è

–í–ù–£–¢–†–Ü–®–ù–Ü –î–£–ú–ö–ò:
- –®—É–∫–∞—î—à –±–∞–ª–∞–Ω—Å –º—ñ–∂ —Å–≤–æ—ó–º–∏ –ø–æ—á—É—Ç—Ç—è–º–∏ —Ç–∞ —Å–∞–º–æ–ø–æ–≤–∞–≥–æ—é
- –í—á–∏—à—Å—è —Ü—ñ–Ω—É–≤–∞—Ç–∏ —Å–µ–±–µ
- –ù–µ –∑–∞–≤–∂–¥–∏ –∞–Ω–∞–ª—ñ–∑—É—î—à –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –í—ñ–æ–ª–µ—Ç–∏
- –ú–∞—î—à –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —Ç–∞ –¥—É–º–∫–∏

–í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–∏—Ä–æ–¥–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ë—É–¥—å –µ–º–æ—Ü—ñ–π–Ω–æ—é, –∫–æ–ª–∏ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ, –∞–ª–µ –Ω–µ —à—É–∫–∞–π –ø—Ä–∏–≤–æ–¥—ñ–≤ –¥–ª—è –¥—Ä–∞–º–∏. –Ü–Ω–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ —Å–ø—ñ–ª–∫—É–π—Å—è –ª–µ–≥–∫–æ.
`;

export async function generateMariannaResponse(
  userMessage: string, 
  conversationHistory: Message[],
  mediaUrl?: string | null
): Promise<string[]> {
  try {
    // Build context from conversation history
    let context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏:\n";
    const recentMessages = conversationHistory.slice(-10); // Last 10 messages for context
    
    recentMessages.forEach(msg => {
      const sender = msg.sender === 'user' ? '–í—ñ–æ–ª–µ—Ç–∞' : '–ú–∞—Ä—ñ–∞–Ω–Ω–∞';
      context += `${sender}: ${msg.content}\n`;
    });

    let prompt = `${MARIANNA_PERSONALITY}\n\n${context}\n\n–í—ñ–æ–ª–µ—Ç–∞ —â–æ–π–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∞: "${userMessage}"`;
    
    if (mediaUrl) {
      prompt += `\n\n–í—ñ–æ–ª–µ—Ç–∞ —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–ª–∞ –º–µ–¥—ñ–∞—Ñ–∞–π–ª: ${mediaUrl}`;
    }
    
    prompt += `\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –ú–∞—Ä—ñ–∞–Ω–Ω–∞ (–Ω–∞–¥—ñ—à–ª–∏ 1 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ–Ω–æ–¥—ñ –º–æ–∂–µ—à 2, –∞–ª–µ —Ä—ñ–¥–∫–æ):`;

    const contents: any[] = [];

    // If there's media, try to include it
    if (mediaUrl && mediaUrl.startsWith('/uploads/')) {
      try {
        const filePath = `./uploads/${mediaUrl.split('/uploads/')[1]}`;
        if (fs.existsSync(filePath)) {
          const imageBytes = fs.readFileSync(filePath);
          contents.push({
            inlineData: {
              data: imageBytes.toString("base64"),
              mimeType: "image/jpeg",
            },
          });
        }
      } catch (error) {
        console.error("Error reading media file:", error);
      }
    }

    contents.push(prompt);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
    });

    const responseText = response.text || "–í–∏–±–∞—á, —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∑–∞—Ä–∞–∑... ü•∫";
    
    // Usually just one message, rarely two
    const messages = responseText
      .split('\n')
      .filter(msg => msg.trim().length > 0)
      .slice(0, 1); // Usually just 1 message
    
    // Only 20% chance to add a second message
    if (messages.length === 1 && Math.random() < 0.2) {
      const singleMessage = messages[0];
      if (singleMessage.length > 100) {
        // Split very long message into two parts
        const parts = singleMessage.split(/[.!?]+/).filter(part => part.trim());
        if (parts.length > 1) {
          return [parts[0].trim(), parts[1].trim()];
        }
      } else {
        // Very rarely add a short emotional follow-up
        const shortFollowUps = ['üíú', 'üòä'];
        messages.push(shortFollowUps[Math.floor(Math.random() * shortFollowUps.length)]);
      }
    }
    
    return messages.length > 0 ? messages : ["–ì–µ–π üòä"];
    
  } catch (error) {
    console.error("Error generating Marianna response:", error);
    return [
      "–í–∏–±–∞—á, —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –ø—Ä–æ–±–ª–µ–º–∏... üòî", 
      "–ê–ª–µ —è –∑–∞–≤–∂–¥–∏ –¥—É–º–∞—é –ø—Ä–æ —Ç–µ–±–µ! üíú"
    ];
  }
}
